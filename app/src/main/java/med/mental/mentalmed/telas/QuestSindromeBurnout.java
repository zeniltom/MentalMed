package med.mental.mentalmed.telas;import android.content.Intent;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.widget.Button;import android.widget.ListView;import java.io.Serializable;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import med.mental.mentalmed.R;import med.mental.mentalmed.adapter.PerguntaSindromeBurnoutAdapter;import med.mental.mentalmed.model.Pergunta;import med.mental.mentalmed.model.PerguntaAnsiedade;import med.mental.mentalmed.model.PerguntaBurnout;import med.mental.mentalmed.model.PerguntaDepressao;import med.mental.mentalmed.model.Questionario;import med.mental.mentalmed.repository.Perguntas;public class QuestSindromeBurnout extends AppCompatActivity {    private final List<PerguntaBurnout> listaDePerguntas = new ArrayList<>();    private List<Pergunta> resultadosSQR20;    private List<PerguntaAnsiedade> resultadosQuestAnsiedade;    private List<PerguntaDepressao> resultadosQuestDepressao;    private Questionario questionario;    private String nivelAnsiedade;    private int resultadosAnsiedade;    private String nivelDepressao;    private int resultadosDepressao;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_quest_sindrome_burnout);        questionario = (Questionario) getIntent().getSerializableExtra("questionario");        resultadosSQR20 = (List<Pergunta>) getIntent().getSerializableExtra("resultadosSQR20");        resultadosQuestAnsiedade = (List<PerguntaAnsiedade>) getIntent().getSerializableExtra("resultadosQuestAnsiedade");        resultadosQuestDepressao = (List<PerguntaDepressao>) getIntent().getSerializableExtra("resultadosQuestDepressao");        Bundle bundle = getIntent().getExtras();        if (bundle != null) {            nivelAnsiedade = bundle.getString("nivelAnsiedade");            resultadosAnsiedade = bundle.getInt("resultadosAnsiedade");            nivelDepressao = bundle.getString("nivelDepressao");            resultadosDepressao = bundle.getInt("resultadosDepressao");        }        Perguntas perguntas = new Perguntas(this);        for (String descricao : perguntas.perguntasSindromeBurnout(this)) {            PerguntaBurnout p = new PerguntaBurnout();            p.setDescricao(descricao);            listaDePerguntas.add(p);        }        ListView lista_perguntas_sindrome_burnout = findViewById(R.id.lista_perguntas_sindrome_burnout);        Button bt_proximo = findViewById(R.id.bt_proximo);        PerguntaSindromeBurnoutAdapter adapter = new PerguntaSindromeBurnoutAdapter(getApplicationContext(), listaDePerguntas);        lista_perguntas_sindrome_burnout.setAdapter(adapter);        bt_proximo.setOnClickListener(view -> avancarInformarCondicao());    }    private void avancarInformarCondicao() {        List<PerguntaBurnout> resultadosQuestSindromeBurnout = new ArrayList<>(PerguntaSindromeBurnoutAdapter.resultados);        HashMap<String, Float> resultadosSindromeB = verificarResultados(resultadosQuestSindromeBurnout);        Intent intent = new Intent(this, InformarCondicaoActivity.class);        intent.putExtra("questionario", this.questionario);        intent.putExtra("resultadosSQR20", (Serializable) resultadosSQR20);        intent.putExtra("resultadosQuestAnsiedade", (Serializable) resultadosQuestAnsiedade);        intent.putExtra("resultadosQuestDepressao", (Serializable) resultadosQuestDepressao);        intent.putExtra("resultadosQuestSindromeBurnout", (Serializable) resultadosQuestSindromeBurnout);        intent.putExtra("nivelAnsiedade", nivelAnsiedade);        intent.putExtra("resultadosAnsiedade", resultadosAnsiedade);        intent.putExtra("nivelDepressao", nivelDepressao);        intent.putExtra("resultadosDepressao", resultadosDepressao);        intent.putExtra("resultadosSindromeB", resultadosSindromeB);        startActivity(intent);    }    /***     * VERIFICA A QUANTIDADE DE RESPOSTAS     * @param resultadosQuestSindromeBurnout     * @return     */    private HashMap<String, Float> verificarResultados(List<PerguntaBurnout> resultadosQuestSindromeBurnout) {        int resultado = 0;        HashMap<String, Float> resultados = new HashMap<>();        for (int i = 0; i < resultadosQuestSindromeBurnout.size(); i++) {            if (resultadosQuestSindromeBurnout.get(i).isMarcada())                resultado = resultado + resultadosQuestSindromeBurnout.get(i).getResposta();        }        resultados.put("exaustaoEmocional", calcularExaustaoEmocional(resultadosQuestSindromeBurnout));        resultados.put("descreca", calcularDescrenca(resultadosQuestSindromeBurnout));        resultados.put("eficaciaProfissional", calcularEficaciaProfissional(resultadosQuestSindromeBurnout));        Log.i("#EXAUSTÃO EMOCIONAL", resultados.get("exaustaoEmocional") > 3 ? "POSSUE EXAUSTÃO EMOCIONAL" : "NORMAL");        Log.i("#DESCRENÇA", resultados.get("descreca") > 3 ? "POSSUE DESCRENÇA" : "NORMAL");        Log.i("#EFICÁCIA PROFISSIONAL", resultados.get("eficaciaProfissional") < 2 ? "NÃO É EFICIENTE PROFISSIONALMENTE" : "NORMAL");        return resultados;    }    private float calcularExaustaoEmocional(List<PerguntaBurnout> lista) {        float resultadoExaustaoEmocional = 0;        int qtdItens = 1;        for (int i = 0; i < lista.size(); i++) {            if (lista.get(i).isMarcada() && i > 0 && i < 6) {                resultadoExaustaoEmocional = resultadoExaustaoEmocional + lista.get(i).getResposta();                qtdItens++;            }        }        return resultadoExaustaoEmocional / qtdItens;    }    private float calcularDescrenca(List<PerguntaBurnout> lista) {        float resultadoDescrenca = 0;        int qtdItens = 1;        for (int i = 0; i < lista.size(); i++) {            if (lista.get(i).isMarcada() && i > 7 && i < 12) {                resultadoDescrenca = resultadoDescrenca + lista.get(i).getResposta();                qtdItens++;            }        }        return resultadoDescrenca / qtdItens;    }    private float calcularEficaciaProfissional(List<PerguntaBurnout> lista) {        float resultadoEficaciaProfissional = 0;        int qtdItens = 1;        for (int i = 0; i < lista.size(); i++) {            if (lista.get(i).isMarcada() && i > 12 && i < 17) {                resultadoEficaciaProfissional = resultadoEficaciaProfissional + lista.get(i).getResposta();                qtdItens++;            }        }        return resultadoEficaciaProfissional / qtdItens;    }}